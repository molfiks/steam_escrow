/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addToFavorites } from '../fn/favorites/add-to-favorites';
import { AddToFavorites$Params } from '../fn/favorites/add-to-favorites';
import { getFavorites } from '../fn/favorites/get-favorites';
import { GetFavorites$Params } from '../fn/favorites/get-favorites';
import { PageResponseFavoritesResponse } from '../models/page-response-favorites-response';
import { removeFromFavorites } from '../fn/favorites/remove-from-favorites';
import { RemoveFromFavorites$Params } from '../fn/favorites/remove-from-favorites';

@Injectable({ providedIn: 'root' })
export class FavoritesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getFavorites()` */
  static readonly GetFavoritesPath = '/favorites';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFavorites()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavorites$Response(params?: GetFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseFavoritesResponse>> {
    return getFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFavorites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFavorites(params?: GetFavorites$Params, context?: HttpContext): Observable<PageResponseFavoritesResponse> {
    return this.getFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseFavoritesResponse>): PageResponseFavoritesResponse => r.body)
    );
  }

  /** Path part for operation `addToFavorites()` */
  static readonly AddToFavoritesPath = '/favorites';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addToFavorites()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addToFavorites$Response(params: AddToFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return addToFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addToFavorites$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addToFavorites(params: AddToFavorites$Params, context?: HttpContext): Observable<number> {
    return this.addToFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `removeFromFavorites()` */
  static readonly RemoveFromFavoritesPath = '/favorites/{productId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeFromFavorites()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFromFavorites$Response(params: RemoveFromFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeFromFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeFromFavorites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeFromFavorites(params: RemoveFromFavorites$Params, context?: HttpContext): Observable<void> {
    return this.removeFromFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
