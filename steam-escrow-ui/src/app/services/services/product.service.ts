/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approvePurchaseProduct } from '../fn/product/approve-purchase-product';
import { ApprovePurchaseProduct$Params } from '../fn/product/approve-purchase-product';
import { approveReturnPurchaseProduct } from '../fn/product/approve-return-purchase-product';
import { ApproveReturnPurchaseProduct$Params } from '../fn/product/approve-return-purchase-product';
import { findAllBoughtProducts } from '../fn/product/find-all-bought-products';
import { FindAllBoughtProducts$Params } from '../fn/product/find-all-bought-products';
import { findAllProducts } from '../fn/product/find-all-products';
import { FindAllProducts$Params } from '../fn/product/find-all-products';
import { findAllProductsByOwner } from '../fn/product/find-all-products-by-owner';
import { FindAllProductsByOwner$Params } from '../fn/product/find-all-products-by-owner';
import { findAllReturnedProducts } from '../fn/product/find-all-returned-products';
import { FindAllReturnedProducts$Params } from '../fn/product/find-all-returned-products';
import { findProductById } from '../fn/product/find-product-by-id';
import { FindProductById$Params } from '../fn/product/find-product-by-id';
import { PageResponseBoughtProductResponse } from '../models/page-response-bought-product-response';
import { PageResponseProductResponse } from '../models/page-response-product-response';
import { ProductResponse } from '../models/product-response';
import { purchaseProduct } from '../fn/product/purchase-product';
import { PurchaseProduct$Params } from '../fn/product/purchase-product';
import { returnPurchaseProduct } from '../fn/product/return-purchase-product';
import { ReturnPurchaseProduct$Params } from '../fn/product/return-purchase-product';
import { saveProduct } from '../fn/product/save-product';
import { SaveProduct$Params } from '../fn/product/save-product';
import { updateArchivedStatus } from '../fn/product/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/product/update-archived-status';
import { updateShareableStatus } from '../fn/product/update-shareable-status';
import { UpdateShareableStatus$Params } from '../fn/product/update-shareable-status';
import { uploadProductCoverPicture } from '../fn/product/upload-product-cover-picture';
import { UploadProductCoverPicture$Params } from '../fn/product/upload-product-cover-picture';

@Injectable({ providedIn: 'root' })
export class ProductService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllProducts()` */
  static readonly FindAllProductsPath = '/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProducts$Response(params?: FindAllProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProductResponse>> {
    return findAllProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProducts(params?: FindAllProducts$Params, context?: HttpContext): Observable<PageResponseProductResponse> {
    return this.findAllProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProductResponse>): PageResponseProductResponse => r.body)
    );
  }

  /** Path part for operation `saveProduct()` */
  static readonly SaveProductPath = '/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveProduct()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveProduct$Response(params: SaveProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return saveProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveProduct$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveProduct(params: SaveProduct$Params, context?: HttpContext): Observable<number> {
    return this.saveProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `purchaseProduct()` */
  static readonly PurchaseProductPath = '/products/purchase/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purchaseProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  purchaseProduct$Response(params: PurchaseProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return purchaseProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purchaseProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  purchaseProduct(params: PurchaseProduct$Params, context?: HttpContext): Observable<number> {
    return this.purchaseProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadProductCoverPicture()` */
  static readonly UploadProductCoverPicturePath = '/products/cover/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadProductCoverPicture()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadProductCoverPicture$Response(params: UploadProductCoverPicture$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadProductCoverPicture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadProductCoverPicture$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadProductCoverPicture(params: UploadProductCoverPicture$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadProductCoverPicture$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `updateShareableStatus()` */
  static readonly UpdateShareableStatusPath = '/products/shareable/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus$Response(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateShareableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateShareableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnPurchaseProduct()` */
  static readonly ReturnPurchaseProductPath = '/products/purchase/return/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnPurchaseProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnPurchaseProduct$Response(params: ReturnPurchaseProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnPurchaseProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnPurchaseProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnPurchaseProduct(params: ReturnPurchaseProduct$Params, context?: HttpContext): Observable<number> {
    return this.returnPurchaseProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnPurchaseProduct()` */
  static readonly ApproveReturnPurchaseProductPath = '/products/purchase/return/approve/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnPurchaseProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnPurchaseProduct$Response(params: ApproveReturnPurchaseProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveReturnPurchaseProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnPurchaseProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnPurchaseProduct(params: ApproveReturnPurchaseProduct$Params, context?: HttpContext): Observable<number> {
    return this.approveReturnPurchaseProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approvePurchaseProduct()` */
  static readonly ApprovePurchaseProductPath = '/products/purchase/approve/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approvePurchaseProduct()` instead.
   *
   * This method doesn't expect any request body.
   */
  approvePurchaseProduct$Response(params: ApprovePurchaseProduct$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approvePurchaseProduct(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approvePurchaseProduct$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approvePurchaseProduct(params: ApprovePurchaseProduct$Params, context?: HttpContext): Observable<number> {
    return this.approvePurchaseProduct$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/products/archived/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findProductById()` */
  static readonly FindProductByIdPath = '/products/{product-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findProductById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findProductById$Response(params: FindProductById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse>> {
    return findProductById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findProductById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findProductById(params: FindProductById$Params, context?: HttpContext): Observable<ProductResponse> {
    return this.findProductById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponse>): ProductResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedProducts()` */
  static readonly FindAllReturnedProductsPath = '/products/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedProducts$Response(params?: FindAllReturnedProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBoughtProductResponse>> {
    return findAllReturnedProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedProducts(params?: FindAllReturnedProducts$Params, context?: HttpContext): Observable<PageResponseBoughtProductResponse> {
    return this.findAllReturnedProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBoughtProductResponse>): PageResponseBoughtProductResponse => r.body)
    );
  }

  /** Path part for operation `findAllProductsByOwner()` */
  static readonly FindAllProductsByOwnerPath = '/products/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllProductsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProductsByOwner$Response(params?: FindAllProductsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProductResponse>> {
    return findAllProductsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllProductsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllProductsByOwner(params?: FindAllProductsByOwner$Params, context?: HttpContext): Observable<PageResponseProductResponse> {
    return this.findAllProductsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProductResponse>): PageResponseProductResponse => r.body)
    );
  }

  /** Path part for operation `findAllBoughtProducts()` */
  static readonly FindAllBoughtProductsPath = '/products/bought';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBoughtProducts()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBoughtProducts$Response(params?: FindAllBoughtProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBoughtProductResponse>> {
    return findAllBoughtProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBoughtProducts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBoughtProducts(params?: FindAllBoughtProducts$Params, context?: HttpContext): Observable<PageResponseBoughtProductResponse> {
    return this.findAllBoughtProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBoughtProductResponse>): PageResponseBoughtProductResponse => r.body)
    );
  }

}
